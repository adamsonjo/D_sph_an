def load_bip39_wordlist(path="bip39_words.txt"):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return set(word.strip() for word in f if word.strip())
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å BIP-39 —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
        exit(1)


def clean_valid_unique_seed_phrases(input_file="only_full_phrases.txt",
                                     output_file="cleaned_seed_phrases_from_reddit.txt"):
    bip39_words = load_bip39_wordlist()

    try:
        with open(input_file, "r", encoding="utf-8") as f:
            raw_phrases = [line.strip() for line in f if line.strip()]

        total_before = len(raw_phrases)
        valid_phrases = []

        for phrase in raw_phrases:
            words = phrase.strip().lower().split()
            word_count = len(words)

            # –£—Å–ª–æ–≤–∏–µ: –¥–ª–∏–Ω–∞ 12 –∏–ª–∏ 24, –≤—Å–µ —Å–ª–æ–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ –≤—Å–µ –∏–∑ BIP-39
            if word_count in (12, 24) and len(set(words)) == word_count and all(word in bip39_words for word in words):
                valid_phrases.append(" ".join(words))

        unique_valid_phrases = sorted(set(valid_phrases))
        total_after = len(unique_valid_phrases)

        with open(output_file, "w", encoding="utf-8") as f:
            for phrase in unique_valid_phrases:
                f.write(phrase + "\n")

        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        print(f"üìÑ –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {total_before}")
        print(f"‚úîÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö (12/24 —Å–ª–æ–≤, –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏–∑ BIP-39): {len(valid_phrases)}")
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {total_after}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {output_file}")

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# ---------------- –ó–∞–ø—É—Å–∫ ----------------
if __name__ == "__main__":
    clean_valid_unique_seed_phrases()